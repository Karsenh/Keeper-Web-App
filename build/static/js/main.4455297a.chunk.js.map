{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","CreateArea","useState","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","onAdd","preventDefault","App","notes","setNotes","deleteNote","prevNotes","filter","noteItem","index","newNote","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qLAUeA,MARf,WACE,OACE,iCACE,2CCMSC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,iCACE,kDAAgBF,QCkBPG,MAtBf,SAAcC,GAWZ,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKD,EAAME,QACX,4BAAIF,EAAMG,UAGV,wBAAQC,QAZZ,WAGEJ,EAAMK,SAASL,EAAMM,KASnB,wB,cCkDSC,MAjEf,SAAoBP,GAAO,MAGDQ,mBAAS,CAC/BN,MAAO,GACPC,QAAS,KALc,mBAGlBM,EAHkB,KAGZC,EAHY,KAUzB,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAAtBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MAEdL,GAAQ,SAACM,GACP,OAAO,2BAEFA,GAFL,kBAIGF,EAAOC,OAsBd,OACE,8BACE,iCAGE,uBACED,KAAK,QACLC,MAAON,EAAKP,MACZe,SAAUN,EACVO,YAAY,UAEd,0BACEJ,KAAK,UACLC,MAAON,EAAKN,QACZc,SAAUN,EACVO,YAAY,iBACZC,KAAK,MAGP,wBAAQf,QAnCd,SAAoBQ,GAElBZ,EAAMoB,MAAMX,GAKZC,EAAQ,CACNR,MAAO,GACPC,QAAS,KAIXS,EAAMS,kBAsBF,uBCHOC,MAtDf,WAAgB,IAAD,EACad,mBAAS,IADtB,mBACNe,EADM,KACCC,EADD,KAcb,SAASC,EAAWnB,GAElBkB,GAAS,SAACE,GAER,OAAOA,EAAUC,QAAO,SAACC,EAAUC,GAEjC,OAAOA,IAAUvB,QAKvB,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAEEc,MA1BN,SAAiBU,GAEfN,GAAS,SAACE,GAER,MAAM,GAAN,mBAAWA,GAAX,CAAsBI,UA0BrBP,EAAMQ,KAAI,SAACH,EAAUC,GAGpB,OACE,cAAC,EAAD,CAIEvB,GAAIuB,EACJ3B,MAAO0B,EAAS1B,MAChBC,QAASyB,EAASzB,QAClBE,SAAUoB,GAJLI,MAQX,cAAC,EAAD,QC3CSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.4455297a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\nfunction Note(props) {\n  // (18) Create a function handleClick()\n  // to trigger a function passed over from the props passed in\n  // that will delete this note from the array\n  // (This could have been an inline anoymous arrow function)\n  function handleClick() {\n    // (21) tap into props.onDelete to trigger the function DeleteNote(id)\n    // (28) pass in the props.id (index) to know which one to delete in onDelete\n    props.onDelete(props.id);\n  }\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      {/* (17) Get our delete button to trigger a function in App.js\n      using props */}\n      <button onClick={handleClick}>DELETE</button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\n\n// (11) Pass in props to pass over note values in function 'addNote'\n// from onAdd attribute in App.jsx\nfunction CreateArea(props) {\n  // (1) Create a stateful constant for both the `title` and `content` input/textarea\n  // using a js object in the note form\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  // (4) Create a function to handle the change within input fields\n  // and store the value with a stateful const\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setNote((prevNote) => {\n      return {\n        // (5) Use spread operator to 'spread' previous KVs (values) to our object.\n        ...prevNote,\n        // (6) use array syntax to capture `name` value constant instead of string\n        [name]: value\n      };\n    });\n  }\n\n  // (7) Create a submit note function to pass into the button on click\n  function submitNote(event) {\n    // (12)\n    props.onAdd(note);\n\n    // (29) Clear out the title and content from the `note` object\n    // Since the input and text area within the form have a (display) value of note.title & note.content\n    // they will be cleared out with this setNote function.\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n\n    // Prevent default refresh upon button click / submission\n    event.preventDefault();\n  }\n\n  return (\n    <div>\n      <form>\n        {/* (2) Add `value`s to control our inputs */}\n        {/* (3) Add `onChange` attribute to pass in a function to `handleChange` */}\n        <input\n          name=\"title\"\n          value={note.title}\n          onChange={handleChange}\n          placeholder=\"Title\"\n        />\n        <textarea\n          name=\"content\"\n          value={note.content}\n          onChange={handleChange}\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n        />\n        {/* (8) Pass submit note function into the button */}\n        <button onClick={submitNote}>Add</button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"././components/Header\";\nimport Footer from \"././components/Footer\";\nimport Note from \"././components/Note\";\nimport CreateArea from \"././components/CreateArea\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  // (9) Create a function to receive and do something with note object\n  function addNote(newNote) {\n    // (13) Get ahold of note information to setNotes into the array\n    setNotes((prevNotes) => {\n      // (14) Append previous values along with new values using spread operator\n      return [...prevNotes, newNote];\n    });\n  }\n\n  // (19) Create a deleteNote function which takes in the ID of the note to delete\n  // to then pass this function over to each note that gets rendered, as a property.\n  function deleteNote(id) {\n    // (22) Remove the note from the notes array using setNotes...\n    setNotes((prevNotes) => {\n      // (23) Followed by looping through by filtering the prevNotes array\n      return prevNotes.filter((noteItem, index) => {\n        // (24) return every noteItem at the index which does not equal the event id (index)\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea\n        // (10) Create an attribute to pass a function through a prop\n        onAdd={addNote}\n      />\n      {/* (15) Loop/map over notes to access each noteItem */}\n      {/* (26) Add another parameter to the .map function to access the index to also use as it's unique ID */}\n      {notes.map((noteItem, index) => {\n        // (16) Return each note component\n        // (20) add the property `onDelete` and pass in the function `deleteNote()`\n        return (\n          <Note\n            // (25) Create a key and ID attribute to pass back for deleting the note\n            // Typically create ID using UUID - But using a simple index from .map iteration param works for this example\n            key={index}\n            id={index}\n            title={noteItem.title}\n            content={noteItem.content}\n            onDelete={deleteNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}